// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Boulder {
  id         String   @id @default(uuid())
  name       String
  city       String
  sector     String
  difficulty Int
  ascents    Int
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt

  ascentions Ascent[]

  @@map("Boulders")
}

model User {
  id        String   @id @default(uuid())
  type      Type     @default(BASIC)
  name      String
  email     String   @unique
  password  String
  score     Int
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  ascents          Ascent[]
  friendsRequested Friendship[] @relation("Requester")
  friendsReceived  Friendship[] @relation("Addressee")

  @@map("Users")
}

model Ascent {
  id        String   @id @default(uuid())
  userId    String
  boulderId String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  boulder Boulder @relation(fields: [boulderId], references: [id])
  User    User    @relation(fields: [userId], references: [id])

  @@unique([userId, boulderId])
  @@map("Ascents")
}

model Friendship {
  id          String   @id @default(uuid())
  requesterId String
  addresseeId String
  status      Status   @default(PENDING)
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt

  requester User @relation("Requester", fields: [requesterId], references: [id])
  addressee User @relation("Addressee", fields: [addresseeId], references: [id])

  @@unique([requesterId, addresseeId])
  @@map("Friendships")
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Type {
  BASIC
  MASTER
}
